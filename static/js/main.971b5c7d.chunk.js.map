{"version":3,"sources":["hooks/useLocalStorageState.js","contexts/VizContext.js","Viz.js","Navbar.js","VizToggle.js","SavingsDescription.js","SavingsGraph.js","OpowerApp.js","App.js","serviceWorker.js","index.js"],"names":["useLocalStorageState","key","defaultVal","useState","val","JSON","parse","window","localStorage","getItem","String","e","state","setState","useEffect","setItem","stringify","VizContext","createContext","VizModeProvider","props","vizMode","setVizMode","Provider","value","children","Viz","data","curYear","energyUse","currentYear","savings","priorYear","n","Math","round","console","log","style","padding","Array","abs","map","i","src","width","Navbar","AppBar","color","position","height","Typography","VizToggle","ToggleButtonGroup","margin","exclusive","onChange","event","newVizMode","aria-label","ToggleButton","SavingsDescription","lastYear","nItems","Container","display","flexDirection","paddingRight","paddingTop","variant","gutterBottom","paddingLeft","paddingBottom","SavingsGraph","graphData","name","kwh","top","right","left","bottom","marginLeft","marginRight","strokeDasharray","dataKey","fill","OpowerApp","myData","floor","Paper","backgroundColor","elevation","Grid","container","justify","spacing","marginTop","item","xs","md","lg","textAlign","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.971b5c7d.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\"\n\nfunction useLocalStorageState(key, defaultVal) {\n    //make piece of state based off value in local storage\n    const [state, setState] = useState(() => {\n        let val;\n        try {\n            val = JSON.parse(window.localStorage.getItem(key) || String(defaultVal))\n        }\n        catch (e) {\n            val = defaultVal\n        }\n        return val\n    })\n    //use useEffect to update localstorage when state changes\n    useEffect(() => {\n        window.localStorage.setItem(key, JSON.stringify(state))\n    }, [state])\n    return [state, setState]\n}\nexport default useLocalStorageState","import React, { createContext } from \"react\"\nimport useLocalStorageState from \"../hooks/useLocalStorageState\"\n\nexport const VizContext = createContext()\n\nexport function VizModeProvider(props) {\n    const [vizMode, setVizMode] = useLocalStorageState(\"vizType\", \"trees\")\n\n    return (\n        <VizContext.Provider value={{ vizMode, setVizMode }}>\n            {props.children}\n        </VizContext.Provider>\n    )\n}","import React, { useContext } from \"react\"\nimport { VizContext } from \"./contexts/VizContext\"\nimport Paper from \"@material-ui/core/Paper\"\nimport { flexbox } from \"@material-ui/system\"\n\nfunction Viz({ data, vizMode }) {\n    // const { vizMode, setVizMode } = useContext(VizContext)\n    const curYear = data.energyUse.currentYear\n    const lastYear = data.energyUse.priorYear\n    const savings = lastYear - curYear\n    const carFactor = 35\n    const treeFactor = 210\n    const n = (vizMode === \"cars\" ? Math.round(savings / carFactor) : Math.round(savings / treeFactor))\n\n    console.log(vizMode)\n    return (\n        <div style={{ padding: 20 }}>\n            {[...Array(Math.abs(n))].map((e, i) => <img src={vizMode == \"cars\" ? \"../car-fill.svg\" : \"../tree-fill.svg\"} style={{ width: \"20%\", padding: 10 }} key={i} />)}\n            {n == 0 && <img src={vizMode == \"cars\" ? \"../car-outline.svg\" : \"../tree-outline.svg\"} style={{ width: \"20%\", padding: 10 }} />}\n        </div>\n    )\n}\n\nexport default Viz","import React from \"react\"\nimport AppBar from \"@material-ui/core/AppBar\"\nimport ToolBar from \"@material-ui/core/Toolbar\"\nimport Typography from \"@material-ui/core/Typography\"\n\nfunction Navbar() {\n    return (\n        <AppBar color=\"primary\" position=\"static\" style={{ height: \"64px\" }}>\n            <ToolBar>\n                <Typography color=\"inherit\">Your Energy Savings</Typography>\n            </ToolBar>\n        </AppBar>\n    )\n}\n\nexport default Navbar","import React from \"react\"\nimport ToggleButtonGroup from \"@material-ui/lab/ToggleButtonGroup\"\nimport ToggleButton from \"@material-ui/lab/ToggleButton\"\nimport DriveEta from \"@material-ui/icons/DriveEta\"\nimport NaturePeople from \"@material-ui/icons/NaturePeople\"\nimport Typography from \"@material-ui/core/Typography\"\n\nfunction VizToggle({ vizMode, setVizMode }) {\n    const handleVizMode = (event, newVizMode) => {\n        if (newVizMode) {\n            setVizMode(newVizMode)\n        }\n    }\n\n    return (\n        <ToggleButtonGroup\n            style={{ margin: 20 }}\n            value={vizMode}\n            exclusive\n            onChange={handleVizMode}\n            aria-label=\"viz type\">\n            <ToggleButton value=\"cars\" aria-label=\"cars\">\n                <DriveEta /><Typography>Cars</Typography>\n            </ToggleButton>\n            <ToggleButton value=\"trees\" aria-label=\"trees\">\n                <NaturePeople /><Typography>Trees</Typography>\n            </ToggleButton>\n        </ToggleButtonGroup>\n    )\n}\n\nexport default VizToggle","import React from \"react\"\nimport Container from \"@material-ui/core/Container\"\nimport ThumbUp from \"@material-ui/icons/ThumbUp\"\nimport Warning from \"@material-ui/icons/Warning\"\nimport CheckCircle from \"@material-ui/icons/CheckCircle\"\nimport Typography from \"@material-ui/core/Typography\"\n\nfunction SavingsDescription({ data, vizMode }) {\n\n    const curYear = data.energyUse.currentYear\n    const lastYear = data.energyUse.priorYear\n    const savings = lastYear - curYear\n    const carFactor = 35\n    const treeFactor = 210\n    const nItems = Math.round((vizMode === \"cars\" ? (savings / carFactor) : (savings / treeFactor)) * 100) / 100\n    const n = Math.round(nItems)\n\n    return (\n        <Container>\n            <div style={{ display: \"flex\", flexDirection: \"row\", }}>\n                {\n                    nItems < 0 &&\n                    <Warning style={{\n                        paddingRight: 15,\n                        paddingTop: 2\n                    }} />\n                    || nItems == 0 &&\n                    <CheckCircle style={{\n                        paddingRight: 15,\n                        paddingTop: 2\n                    }} />\n                    || nItems > 0 &&\n                    <ThumbUp style={{\n                        paddingRight: 15,\n                        paddingTop: 2\n                    }} />\n                }\n                <Typography variant=\"h5\" gutterBottom>\n                    {\n                        ((nItems < 0 && vizMode === \"cars\") && `Compared to this month last year, you used ${Math.abs(nItems)} more ${n === -1 ? \"car's\" : \"cars'\"} worth of energy.`)\n                        || ((nItems < 0 && vizMode === \"trees\") && `Compared to this month last year, you used the carbon equivalent of ${Math.abs(nItems)} ${n === -1 ? \"tree's\" : \"trees'\"} more energy.`)\n                        || ((nItems === 0) && `You used the same amount of energy as this month last year.`)\n                        || ((nItems > 0 && vizMode === \"cars\") && `Last month, you saved enough energy to take ${nItems} car${nItems === 1 ? \"\" : \"s\"} off the road!`)\n                        || ((nItems > 0 && vizMode === \"trees\") && `Last month, you saved the energy equivalent of ${nItems} tree${nItems === 1 ? \"'s\" : \"s\"} worth of carbon!`)\n                    }\n                </Typography>\n            </div>\n            <Typography variant=\"body1\" style={{ paddingLeft: 40, paddingTop: 10, paddingBottom: 20 }}>\n                {\n\n                    (nItems < 0 && vizMode == \"cars\") &&\n                    `You used ${curYear} kwh last month, \n                        compared to ${lastYear} kwh in the same month last year. \n                        This amount is equal to the energy consumption of  \n                        ${Math.abs(nItems)} average-size car${nItems == 1 ? \"\" : \"s\"} for one month.`\n                    || (nItems < 0 && vizMode == \"trees\") &&\n                    `You used ${curYear} kwh last month, \n                        compared to ${lastYear} kwh in the same month last year. \n                        It would take\n                        ${Math.abs(nItems)} tree${nItems == 1 ? \"\" : \"s\"} a month to sequester that amount of carbon.`\n                    || nItems == 0 &&\n                    `You used ${curYear} kwh last month, \n                        the same amount as the same month last year.`\n                    || (nItems > 0 && vizMode == \"cars\") &&\n                    `Great Job! You used ${curYear} kwh last month, \n                        compared to ${lastYear} kwh in the same month last year.\n                        The resulting saving is enough to offset the \n                        energy consumption of ${nItems} average-size car${nItems == 1 ? \"\" : \"s\"}\n                        for one month.`\n                    || (nItems > 0 && vizMode == \"trees\") &&\n                    `Great Job! You used ${curYear} kwh last month, \n                        compared to ${lastYear} kwh in the same month last year.\n                        The resulting saving is equivalent to the \n                        carbon sequestered by ${nItems} tree${nItems == 1 ? \"\" : \"s\"}\n                        in one month.`\n                }\n            </Typography>\n        </Container>\n    )\n}\n\nexport default SavingsDescription","import React from \"react\"\nimport {\n    BarChart, Bar, Cell, XAxis, YAxis, CartesianGrid, Tooltip, Legend,\n} from 'recharts'\n\nfunction SavingsGraph(props) {\n    const graphData = [\n        {\n            name: 'Last year', kwh: props.data.energyUse.priorYear\n        },\n        {\n            name: 'This year', kwh: props.data.energyUse.currentYear\n        }\n    ]\n\n    return (\n        <BarChart\n            width={300}\n            height={300}\n            data={graphData}\n            margin={{\n                top: 0, right: 30, left: 20, bottom: 5,\n            }}\n            style={{\n                marginLeft: \"auto\",\n                marginRight: \"auto\"\n            }}\n        >\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey=\"name\" />\n            <YAxis />\n            <Tooltip />\n            <Legend />\n            <Bar dataKey=\"kwh\" fill=\"#8884d8\" />\n        </BarChart>\n    )\n}\n\nexport default SavingsGraph","import React, { useContext, useState, PureComponent } from \"react\"\nimport Paper from \"@material-ui/core/Paper\"\nimport Grid from \"@material-ui/core/Grid\"\nimport Viz from \"./Viz\"\nimport data from \"./data.json\"\nimport { makeStyles } from '@material-ui/core/styles';\nimport Navbar from \"./Navbar\"\nimport VizToggle from \"./VizToggle\"\nimport Description from \"./SavingsDescription\"\nimport SavingsGraph from \"./SavingsGraph\"\n\n/*\nconst useStyles = makeStyles(theme => ({\n    root: {\n        flexGrow: 1,\n    },\n    paper: {\n        padding: theme.spacing(2),\n        textAlign: 'center',\n        color: theme.palette.text.secondary,\n    },\n}));\n*/\n\nfunction OpowerApp() {\n    const [myData, setMyData] = useState(data);\n    const [vizMode, setVizMode] = useState(\"cars\")\n    // const { vizMode, setVizMode } = useContext(VizContext)\n\n    const curYear = myData.energyUse.currentYear\n    const lastYear = myData.energyUse.priorYear\n    const savings = lastYear - curYear\n    const vizType = \"cars\"\n    const carFactor = 35\n    const treeFactor = 210\n    const n = (vizType === \"cars\" ? Math.floor(savings / carFactor) : Math.floor(savings / treeFactor))\n\n    return (\n        <Paper style={{\n            padding: 0,\n            margin: 0,\n            height: \"100vh\",\n            width: \"100vw\",\n            backgroundColor: \"#fafafa\"\n        }}\n            elevation={0}\n        >\n            <Navbar />\n            <Grid container justify=\"center\" spacing={3} style={{ marginTop: \"1rem\" }} >\n                <Grid item xs={11} md={11} lg={5}>\n                    <Paper style={{ textAlign: \"center\" }}>\n                        <Viz data={myData} vizMode={vizMode} />\n                        <VizToggle vizMode={vizMode} setVizMode={setVizMode} />\n                    </Paper>\n                </Grid>\n                <Grid item xs={11} md={11} lg={6}>\n                    <Paper style={{ padding: 30 }}>\n                        <Description data={myData} vizMode={vizMode} />\n                        <SavingsGraph data={myData} vizMode={vizMode} />\n                    </Paper>\n                </Grid>\n            </Grid>\n\n        </Paper >\n    )\n}\n\nexport default OpowerApp","import React from 'react'\nimport './App.css'\nimport OpowerApp from './OpowerApp'\n\nimport { VizModeProvider } from \"./contexts/VizContext\"\n\nfunction App() {\n  return (\n    <VizModeProvider>\n      <OpowerApp />\n    </VizModeProvider>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}